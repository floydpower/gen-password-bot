from datetime import date
import random
from aiogram.types import Message
from bot import *
from keyboards.reply import *
from keyboards.inline import *
from aiogram.dispatcher import FSMContext
from states.states import UserStates

symbols = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%&*()_-'

async def cmd_start(message: Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
    if db.check_ban(message.from_user.id) == 1:
        await message.answer('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await message.answer("üî• –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!\n\n"
                            f"<b>–ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏!</b> –ü—Ä–æ–µ–∫—Ç Open-Source!\n",
                            reply_markup=kb_user)

async def info(message: Message):
    user_stats = db.user_stats(message.from_user.id)
    stats = db.stats()
    if date.today() != stats[2]:
        db.update_date(date.today())
        db.refresh_data()
    await message.answer(f'{message.from_user.username} (<code>{message.from_user.id}</code>)\n'
                         f'–í—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ <code>{user_stats[1]}</code> –ø–∞—Ä–æ–ª–µ–π\n\n'
                         f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <code>{db.count_users()[0][0]}</code>\n'
                         f'–í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä–æ–ª–µ–π: <code>{stats[0]}</code>\n'
                         f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä–æ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: <code>{stats[1]}</code>', reply_markup=info_kb)

async def gen_password(message: Message):
    if db.check_ban(message.from_user.id) == 1:
        await message.answer('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:', reply_markup=kb_choices)
        await UserStates.set_difficulty.set()

async def set_difficulty(message: Message, state: FSMContext):
    password = ''
    if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await state.reset_state(with_data=True)
        await message.answer('–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é',
                             reply_markup=kb_user)
    else:
        if message.text == 'üçè –õ–µ–≥–∫–∏–π':
            for i in range(random.randint(5, 12)):
                password += random.choice(symbols)
            await message.answer(f'üîë –í–∞—à –ø–∞—Ä–æ–ª—å: {password}',
                                 reply_markup=kb_user)


        elif message.text == 'üçä –°—Ä–µ–¥–Ω–∏–π':
            for i in range(random.randint(10, 17)):
                password += random.choice(symbols)
            await message.answer(f'üîë –í–∞—à –ø–∞—Ä–æ–ª—å: {password}',
                                 reply_markup=kb_user)

        elif message.text == '‚ô¶Ô∏è –°–ª–æ–∂–Ω—ã–π':
            for i in range(random.randint(20, 35)):
                password += random.choice(symbols)
            await message.answer(f'üîë –í–∞—à –ø–∞—Ä–æ–ª—å: {password}',
                                 reply_markup=kb_user)

        db.add_count(message.from_user.id)
        db.add_today()
        db.add_all_count()
        await message.answer('üòä –í–µ–∂–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º –±—ã–ª–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–¥ —Ç–µ–º–æ–π –Ω–∞ —Ñ–æ—Ä—É–º–µ LOLZTEAM',
                                 reply_markup=review_kb)

    await state.finish()



