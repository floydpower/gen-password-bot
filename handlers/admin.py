from bot import *
from keyboards.reply import *
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from states.states import AdminStates

async def cmd_admin(message: Message):
    if message.from_user.id == int(admin_id):
        await message.answer('–ê–¥–º–∏–Ω-–º–µ–Ω—é', reply_markup=kb_admin)
    else:
        pass

async def cmd_rass(message: Message):
    if message.from_user.id == admin_id:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=kb_back)
        await AdminStates.set_text.set()
    else:
        pass

async def rass(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(
        {
            'text': text
        }
    )
    if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await state.reset_state(with_data=True)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_admin)
    else:
        await message.answer('üñº –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:\n–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ')
        await AdminStates.set_pic.set()

async def pic(message: Message, state: FSMContext):
    counter = 0
    counter_unsended = 0
    data = await state.get_data()
    text = data.get('text')
    await state.finish()
    if message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await state.reset_state(with_data=True)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_admin)

    elif not message.text:
            photo_id = message.photo[0].file_id
            for row in db.all_users():
                try:
                    await bot.send_photo(row[0], photo=photo_id, caption=text)
                    counter += 1
                except:
                    counter_unsended += 1
    else:
        for row in db.all_users():
            try:
                await bot.send_message(row[0], text=text)
                counter += 1
            except:
                counter_unsended += 1

    await message.answer('üì™ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                             f'üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <code>{db.count_users()[0][0]}</code>\n'
                             f'‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É: <code>{counter}</code>\n'
                             f'‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏: <code>{counter_unsended}</code>', reply_markup=kb_admin)

async def cmd_ban(message: Message):
    if message.from_user.id == int(admin_id):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ USERID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        await AdminStates.get_userid.set()
    else:
        pass

async def set_ban(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        if not db.user_exists(user_id):
            await message.answer('‚ùå –Æ–∑–µ—Ä –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            db.set_ban(user_id)
            await message.answer('‚úÖ –Æ–∑–µ—Ä –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω')

    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')

    finally:
        await state.finish()




